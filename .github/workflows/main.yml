---
name: Main workflow
# This workflow requires following secrets and variables to be set
# SECRETS
# https://github.com/ -> project -> /settings/secrets/actions
# - GHCR_TOKEN
# - SSH_PRIVATE_KEY
# - DOCKER_HOST_URI

# VARIABLES
# - APP_DEV_MODE
# - APP_ENV_NAME: 'production' or 'test', used in main.tf for creating shared directory
# - APP_DB_HOST
# - APP_DB_PORT
# - APP_DB_NAME
# - APP_DB_USERNAME
# - APP_DB_PASSWORD
# - APP_DYNAMIC_CONFIG_FILE
# - APP_PROCESS_DEFINITION_DIR
# - APP_PROCESS_EXECUTION_DIR

# this workflow uses actions:
# https://github.com/trineracz/deploy-backend-with-terraform

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - dev
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.check_branch_and_tag.outputs.environment }}
    steps:
      - name: Dump VARS context
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: echo "$VARS_CONTEXT"

      - name: "Check the branch and tag"
        id: check_branch_and_tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Use PRODUCTION environment"
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "Use TEST environment"
            echo "environment=test" >> $GITHUB_OUTPUT
          else
            echo "Branch name: ${{ github.ref_name }}, REF: ${{ github.ref }}"
            echo "Nothing to do. Exit"
            exit 0
          fi

  set_variables:
    runs-on: ubuntu-latest
    needs: set_environment
    if: ${{ needs.set_environment.outputs.environment != '' }}
    environment: ${{ needs.set_environment.outputs.environment }}
    outputs:
      ref_name: ${{ steps.set_vars.outputs.ref_name }}
      docker_container_suffix:
        ${{ steps.set_vars.outputs.docker_container_suffix }}_${{ github.sha }}
      docker_image: ${{ steps.set_vars.outputs.docker_image }}

    steps:
      - uses: actions/checkout@v4

      - name: Dump VARS context
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          echo "$VARS_CONTEXT"
          echo "environment: ${{ needs.set_environment.outputs.environment }}"

      - name: Set vars
        id: set_vars
        run: |
          REF_NAME=$(echo $GITHUB_REF_NAME | grep -oE '([a-z0-9\-\.]*?)$')
          (
            echo "ref_name=$REF_NAME"
            echo "docker_container_suffix=${REF_NAME//\./_}"
            echo "docker_image=ghcr.io/${GITHUB_REPOSITORY,,}-$REF_NAME"
          ) | tee --append "$GITHUB_OUTPUT" > "GITHUB_ENV"

  build:
    if:
      github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    needs: set_variables
    runs-on: ubuntu-latest
    environment: ${{ needs.set_environment.outputs.environment }}
    env:
      DOCKER_IMAGE: ${{ needs.set_variables.outputs.docker_image }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to ghcr.io
        run: >
          echo "${{ secrets.GHCR_TOKEN }}"
          | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set DOCKER_TAG
        run: echo "DOCKER_TAG=$(date +%Y%m%d%H%M)" > "$GITHUB_ENV"

      - name: Build the Docker image
        run: |
          docker build \
            --tag "${DOCKER_IMAGE}:latest" \
            --tag "${DOCKER_IMAGE}:${DOCKER_TAG}" \
            --file Dockerfile .

      - name: Push image to GHCR
        run: |
          docker push "${DOCKER_IMAGE}:latest"

  deploy:
    name: deploy
    needs:
      - set_environment
      - set_variables
      - build
    runs-on: ubuntu-latest
    environment: ${{ needs.set_environment.outputs.environment }}
    env:
      DOCKER_IMAGE: ${{ needs.set_variables.outputs.docker_image }}

    # Use the Bash shell regardless whether the GitHub Actions runner is
    # ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Configure SSH
        run: |
          eval `ssh-agent -s`
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Dump VARS context
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          echo "$VARS_CONTEXT"
          echo "environment: ${{ needs.set_environment.outputs.environment }}"

      - name: 'Deploy with Terraform'
        id: deploy_with_terraform
        uses: trineracz/deploy-backend-with-terraform@v0.0.1
        env:
          TF_VAR_APP_ENV_NAME: ${{ vars.APP_ENV_NAME }}
          TF_VAR_APP_DB_HOST: ${{ vars.APP_DB_HOST }}
          TF_VAR_APP_DB_PORT: ${{ vars.APP_DB_PORT }}
          TF_VAR_APP_DB_NAME: ${{ vars.APP_DB_NAME }}
          TF_VAR_APP_DB_USERNAME: ${{ vars.APP_DB_USERNAME }}
          TF_VAR_APP_DB_PASSWORD: ${{ vars.APP_DB_PASSWORD }}
          TF_VAR_APP_PROCESS_EXECUTION_DIR: ${{ vars.APP_PROCESS_EXECUTION_DIR }}
          TF_VAR_APP_PROCESS_DEFINITION_DIR: ${{ vars.APP_PROCESS_DEFINITION_DIR }}
          TF_VAR_APP_DYNAMIC_CONFIG_FILE: ${{ vars.APP_DYNAMIC_CONFIG_FILE }}
        with:
          TERRAFORM_DOCKER_IMAGE: ${DOCKER_IMAGE}
          TERRAFORM_DOCKER_CONTAINER_NAME:
            "anakon_dtd_executor_${{ needs.set_variables.outputs.docker_container_suffix }}"
          TERRAFORM_DOCKER_HOST_URI: ${{ secrets.DOCKER_HOST_URI }}
          TERRAFORM_GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          TERRAFORM_GHCR_USERNAME: ${{ github.actor }}
